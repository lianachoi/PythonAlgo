...
Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.
...

class Solution:
    def isPalindrome(self, s: str) -> bool:
        strs = []
        for char in s:
            if char.isalnum():
                strs.append(char.lower())
        while len(strs) > 1:
            if strs.pop(0) != strs.pop():
                return False
        return True

'''
# use Deque
class Solution:
    def isPalindrome(self, s: str) -> bool:
        strs: Deque = collections.deque()
            
        for c in s:
            if c.isalnum():
                strs.append(c.lower())
        
        while len(strs) > 1:
            if strs.popleft() != strs.pop():
                return False
        return True
'''

'''
# Slicing
class Solution:
    def isPalindrome(self, s: str) -> bool:
        s = s.lower()
        s = re.sub('[^a-z0-9]','',s)
        
        return s == s[::-1]
'''

'''
# // C 스킵포인터 사용
bool isPalindrome(char * s){
    int bias_left = 0;
    int bias_right = 1;

    int str_len = strlen(s);
    for (int i = 0; i < str_len; i++) {
        while (!isalnum(s[i + bias_left])) {
            bias_left++;
            if (i + bias_left == str_len)
                return true;
        }
        while (!isalnum(s[str_len - i - bias_right])) {
            bias_right++;
        }
        if (i + bias_left >= str_len - i - bias_right)
            break;
        if (tolower(s[i + bias_left]) != tolower(s[str_len - i - bias_right]))
            return false;
    }
    return true;
}
'''
